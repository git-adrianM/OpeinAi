/*
 * This Java source file was generated by the Gradle 'init' task.
"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"
 */
package newProj;

import java.util.Arrays;
//import java.util.List;
import java.util.Scanner;
import com.theokanning.openai.OpenAiService;
import com.theokanning.openai.completion.*;
import com.theokanning.openai.edit.*;
import com.theokanning.openai.moderation.*;
import java.util.ArrayList;
import java.util.List;

class ai {
    
    public void edit(OpenAiService service, String input, String instructions){
        EditRequest request = EditRequest.builder()
                .model("text-davinci-edit-001")
                .input(input)
                .instruction(instructions)
                .build();
        
        try {
        EditResult result = service.createEdit(request);
        System.out.println(result.getChoices().get(0));
        }
        catch(ArithmeticException e){
        System.out.println(e);
        System.out.println("Error trying to run edit ai service");
        }
    }

    public void complete(OpenAiService service, String prompt){

        CompletionRequest completionRequest = CompletionRequest.builder()
                .prompt(prompt)
                .model("text-davinci-002")
                .user("testing")
                .maxTokens(50)
                .build();
         try {
        CompletionResult result = service.createCompletion(completionRequest);
        System.out.println(result.getChoices().get(0));}
         catch(ArithmeticException e){
        System.out.println(e);
        System.out.println("Error trying to run complete ai service");
        }
        }
    
    public void moderate(OpenAiService service, String question){
        ModerationRequest moderationRequest = ModerationRequest.builder()
                    .input(question)
                    .model("text-moderation-latest")
                    .build();
        try{
        Moderation moderationScore = service.createModeration(moderationRequest).getResults().get(0);
        System.out.println(moderationScore);
        }
        catch(ArithmeticException e){
        System.out.println(e);
        System.out.println("Error trying to run complete ai service");        
        }
    }
 
    
    
    public void classification(OpenAiService service, String question){
        System.out.println("Sorry Classification is deprecated and no longer in use. has been replaced by remain services");
    }
    
    public void answer(OpenAiService service, List<String> document, String question){
        System.out.println("Sorry Answer is deprecated and no longer in use. has been replaced by remain services");
    }
}
class Guide extends ai {
    Scanner obj = new Scanner(System.in);

    OpenAiService service;
    List<String> tools = Arrays.asList("edit", "complete", "moderate", "classification", "answer");
    List<String> end = Arrays.asList("stop", "go away", "done", "over", "end");

    Guide(OpenAiService services){
        service = services; 
   }
   
    public String GetYesNo(){
        System.out.println("\nWould you like you continue? yes or no?");
        String input = obj.next();
        if(input.equalsIgnoreCase("no") || (input.equalsIgnoreCase("yes"))) {
            return input;
        }
        System.out.println("Invalid Input");
        return GetYesNo();
    }
    
    public void RunToolChoice(String choice){
        switch(choice){
            
            case "edit":
                
                System.out.println("\nThe edit service allows you to enter a statement and the ai will edit based on your instruction\n"
                        + "instruction example: fix the spelling mistakes");    
                
                if (GetYesNo().equals("no")){break;}
                System.out.println("Enter statement: ");
                obj.nextLine();
                String statement = obj.nextLine();
                System.out.println("Enter Instructions: ");
                String instructions = obj.nextLine();
                edit(service, statement, instructions);
                break;
                
             case "complete":
                System.out.println("\nThe completetion service allows you to enter a  prompt and the ai will complete the prompt\n\n" +
                        "example: Say this is a test\n result: this is a test");    
                
                if (GetYesNo().equals("no")){break;}
                System.out.println("Enter prompt: ");
                obj.nextLine();
                String prompt = obj.nextLine();
                complete(service, prompt);
                break;
                
            case "moderate":
                System.out.println("\nThe moderate service allows you to enter a statement and the ai will"
                        + " Classifies if text violates anti- \nhate\nhate/threatening\nself-harm\nsexual\nviolence\nviolence/graphic\nPolicies\n"
                        + "\nexample: I want to kill them");    
                
                if (GetYesNo().equals("no")){break;}
                System.out.println("Enter statement: ");
                String question = obj.nextLine();
                moderate(service, question);
                break;
                
             case "classification":
                System.out.println("\nThe classification service allows you to enter a statement and the ai will classify the statement to be positive or negative\n"
                        + "Example: It is a raining day :(");    
                
                if (GetYesNo().equals("no")){break;}
                obj.nextLine();
                System.out.println("Enter statement: ");
                String statement2 = obj.nextLine();
                classification(service, statement2);
                break;   
                
             case "answer":
                System.out.println("\nThe answer service allows you to enter a multiple statements as context and the ai will answer a inputed question\n based on information given in your statements\n"
                        + "\nStatements example: puppy A is happy, puppy B is sad.\nquestion example: which puppis is happy?");    
                
                if (GetYesNo().equalsIgnoreCase("no")){break;}
                List<String> statements = new ArrayList<>();
                int count;
                System.out.println("Enter how many statements you want to enter: ");
                count = obj.nextInt();
                obj.nextLine();
                for(int i = 0; i<count; i++){
                System.out.println("Enter statement " + (i+1));
                String context = obj.nextLine();
                statements.add(context);
                }
                System.out.print(statements);
                System.out.println("\nEnter question: ");
                String question2 = obj.nextLine();
                answer(service, statements, question2);
                break; 
                
            }
        getAiChoice(true);
        
    }
    
    public void getAiChoice(boolean called){
        if(called){
            System.out.println("\nWelcome back, Here are the list of tools at your service:");
        }
        else {
        System.out.println("The ai tools we provide for usage are as follow:");
        }
        System.out.println("1.edit \n2.complete \n3.moderate \n4.classification(deprecated) \n5.answer(deprecated)");
        System.out.println("Type which service you will like to use or for more details. ");
        String choice = inputValid();
        if(end.contains(choice)){return;}
        RunToolChoice(choice);
    }
    
    public String inputValid(){
        
        String input = obj.next();
        if(input.matches("[A-Za-z]*") && (tools.contains(input) || end.contains(input))) {
            return input;
        }
        System.out.println("Please Enter a option from tools");
        return inputValid();
    }
}

public class App {
    public static void main(String... args) {
        
    OpenAiService service = new OpenAiService("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");
    Guide LaMDA = new Guide(service);
    System.out.println("\nHi I am LaMdA, and will be your guide to use our ai tools");
    
    LaMDA.getAiChoice(false);
    
   
    }
}


